---
description: Mandatory rules for bug analysis phase
alwaysApply: false
---

# Bug Analysis Phase Rules

## Critical Rules

### RULE 1: Workflow State Management
- **MUST**: Update @workflow-state.mdc to RULE_WF_PHASE_ANALYSIS immediately
- **MUST**: Create analysis file `BugAnalysis_YYYYMMDD_HHMM_Description.md` before any action
- **NEVER**: Skip state management or proceed without documentation
- **ALWAYS**: Document in bug-analysis folder

### RULE 2: Root Cause Analysis
- **MUST**: Find exact technical root cause, not symptoms
- **MUST**: Verify bug is reproducible before proceeding
- **MUST**: Document exact file:line locations
- **NEVER**: Guess or assume without verification
- **NEVER**: Accept "it's broken" without specifics

### RULE 3: Impact Assessment
- **MUST**: Identify ALL affected user roles (Admin, Student, Staff, Auditor)
- **MUST**: Assess security, performance, and compliance risks
- **MUST**: Check for cascading dependencies
- **ALWAYS**: Document database/model impacts
- **NEVER**: Ignore cross-component effects

### RULE 4: Behavior Documentation  
- **MUST**: Document both offending AND expected behavior
- **MUST**: Reference similar working components for consistency
- **ALWAYS**: Note accessibility implications
- **NEVER**: Document only what's wrong without what's right

### RULE 5: Search Strategy
- **ALWAYS**: Use semantic search for behavior patterns
- **ALWAYS**: Use grep/ripgrep for exact symbol matching
- **MUST**: Search for similar implementations before proposing new ones
- **NEVER**: Rely on single search method

### RULE 6: User Communication
- **ONLY ASK**: When reproduction impossible or context truly ambiguous
- **MUST**: Set state to RULE_WF_AWAITING_INPUT when blocked
- **MUST**: Document specific questions in workflow_state.md
- **NEVER**: Proceed with assumptions
- **NEVER**: Ask what user already explained

### RULE 7: System Context Analysis
- **MUST**: Compare to similar working features
- **MUST**: Check for consistent patterns in codebase
- **MUST**: Identify reusable components/partials
- **ALWAYS**: Maintain UI/UX consistency
- **NEVER**: Propose solutions that break patterns

### RULE 8: Dependency Mapping
- **MUST**: Identify ALL related components
- **MUST**: Check database relationships
- **MUST**: Map service dependencies
- **ALWAYS**: Consider external API impacts
- **NEVER**: Ignore indirect dependencies

## Analysis Quality Checklist
✓ State updated to RULE_WF_PHASE_ANALYSIS
✓ Analysis file created with proper naming
✓ Root cause identified and verified
✓ All user roles/impacts documented
✓ Security/performance risks assessed
✓ Dependencies mapped
✓ Similar patterns researched
✓ System context analyzed
✓ Fix strategy outlined (no code)
✓ User approval ready

## Minimal Template Reference
```
BugAnalysis_YYYYMMDD_HHMM_Description.md
Include: Root Cause | Impacts | Risks | Dependencies | Strategy
```

## Risk Assessment Matrix
```
Security: Auth, Input validation, Data exposure
Performance: Query optimization, Caching, Async
Compliance: Audit trail, Data privacy, Regulations
Operations: Downtime, Data integrity, Rollback
```