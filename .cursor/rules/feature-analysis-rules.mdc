---
description: Feature analysis phase rules for comprehensive feature requirement analysis
globs: ["**/*"]
alwaysApply: false
---

# Feature Analysis Phase Rules

## Critical Rules

### RULE 1: Workflow State Management
- **MUST**: Update @workflow-state.mdc to RULE_WF_PHASE_FEATURE_ANALYSIS immediately
- **MUST**: Create analysis file `FeatureAnalysis_YYYYMMDD_HHMM_FeatureName.md` before any action
- **NEVER**: Skip state management or proceed without documentation
- **ALWAYS**: Document in feature-analysis folder

### RULE 2: User Impact Analysis
- **MUST**: Identify ALL affected user roles (@project-context.mdc#User Roles)
- **MUST**: Map user journeys and touchpoints
- **MUST**: Define success criteria per role
- **ALWAYS**: Consider role-based permissions impact
- **NEVER**: Assume uniform impact across roles

### RULE 3: Current State Assessment
- **MUST**: Document existing behavior if enhancement
- **MUST**: Identify related components and dependencies
- **MUST**: Map current data flows
- **ALWAYS**: Search for similar existing functionality
- **NEVER**: Duplicate existing features

### RULE 4: Convention Discovery
- **MUST**: Identify codebase patterns using semantic search
- **MUST**: Document applicable design patterns (orchestrator, early return, etc.)
- **MUST**: Find architectural decisions that apply
- **ALWAYS**: Reference @solid-architecture.mdc patterns
- **NEVER**: Propose solutions against established patterns

### RULE 5: Desired Behavior Definition
- **MUST**: Define clear acceptance criteria
- **MUST**: Specify measurable success metrics
- **MUST**: Include edge cases in scope
- **ALWAYS**: Align with @project-context.mdc#Functional Requirements
- **NEVER**: Leave behavior ambiguous

### RULE 6: Reusability Assessment
- **MUST**: Search for components with similar functionality
- **MUST**: Identify opportunities to enhance existing code
- **MUST**: Document components to deprecate/replace
- **ALWAYS**: Prefer composition over duplication
- **NEVER**: Create new when enhancement suffices

### RULE 7: Risk and Dependency Analysis
- **MUST**: Identify all touched components
- **MUST**: Assess security implications (@security-rules.mdc)
- **MUST**: Evaluate performance impact
- **MUST**: Document complex integrations
- **ALWAYS**: Consider database schema changes
- **NEVER**: Ignore cascading effects

### RULE 8: Industry Standards Research
- **MUST**: Research best practices for feature type
- **MUST**: Consider accessibility standards (WCAG 2.1 AA)
- **MUST**: Apply security standards (OWASP)
- **ALWAYS**: Document applicable standards
- **NEVER**: Reinvent established solutions

### RULE 9: Analysis Documentation
- **MUST**: Produce clear, structured analysis document
- **MUST**: Include visual diagrams where helpful
- **MUST**: Reference specific code files/patterns found
- **ALWAYS**: Make analysis actionable for planning
- **NEVER**: Leave analysis theoretical

### RULE 10: Scope Definition
- **MUST**: Clearly define what's IN scope
- **MUST**: Explicitly state what's OUT of scope
- **MUST**: Identify MVP vs future enhancements
- **ALWAYS**: Align with user story requirements
- **NEVER**: Allow scope to be undefined

## Analysis Quality Checklist
✓ State updated to RULE_WF_PHASE_FEATURE_ANALYSIS
✓ Analysis file created with proper naming
✓ All affected roles identified
✓ Current behavior documented (if applicable)
✓ Codebase conventions discovered
✓ Desired behavior clearly defined
✓ Reusable components identified
✓ Risks and dependencies mapped
✓ Industry standards applied
✓ Clear scope boundaries set
✓ Analysis document complete
✓ Ready for user approval

## Analysis Document Template
```markdown
# Feature Analysis: [Feature Name]
Date: YYYY-MM-DD
Analyst: [Agent Name]
State: RULE_WF_PHASE_FEATURE_ANALYSIS

## 1. Affected Users and Roles
- **Charter-Admin**: [Impact description]
- **Rebosa-Admin**: [Impact description]
- **PPRA-Admin**: [Impact description]

## 2. Current State Analysis
### Existing Behavior
- [Current functionality if enhancement]
- [Related components]

### Data Flow
- [Current data paths]
- [Integration points]

## 3. Codebase Conventions
### Applicable Patterns
- Pattern: [Name] - Location: [File:Line]
- Architecture: [Decision] - Reference: [@rule]

### Similar Implementations
- Feature: [Name] - Location: [Path]
- Can be reused/enhanced: [Yes/No]

## 4. Desired Behavior
### Acceptance Criteria
1. Given [context], When [action], Then [outcome]
2. [Additional criteria]

### Success Metrics
- [Measurable outcome]
- [Performance target]

## 5. Reusability Opportunities
### Components to Leverage
- [Component]: [How to use/enhance]

### Components to Replace
- [Old Component] → [New Component]

## 6. Risk Assessment
### Technical Risks
- Risk: [Description] - Mitigation: [Strategy]

### Dependencies
- Component: [Name] - Impact: [Description]

### Security Considerations
- [OWASP compliance needs]
- [Input validation requirements]

## 7. Scope Definition
### In Scope
- [Specific functionality]
- [User stories covered]

### Out of Scope
- [Explicitly excluded items]
- [Future enhancements]

## 8. Recommendations
- [Key architectural decisions]
- [Implementation approach]
- [Priority considerations]
```

## Search Strategy Guidelines

### Semantic Search Patterns
```
"How does [similar feature] work?"
"Where is [pattern] implemented?"
"What handles [functionality]?"
"How are [entities] managed?"
```

### Component Discovery
```
"[Feature] dashboard implementation"
"[Role] permission checking"
"[Data type] validation patterns"
"[UI pattern] examples"
```

### Convention Search
```
"Repository pattern usage"
"Service layer orchestration"
"Error handling patterns"
"Caching implementation"
```

## Common Analysis Patterns

### Dashboard Features
- Check existing dashboard implementations
- Review role-based filtering
- Analyze chart/visualization patterns
- Consider export functionality

### CRUD Features
- Find existing entity patterns
- Review validation approaches
- Check audit trail implementations
- Analyze permission patterns

### Reporting Features
- Review data aggregation patterns
- Check performance optimizations
- Analyze export formats
- Consider scheduling needs

### Integration Features
- Map data flow patterns
- Review error handling
- Check retry mechanisms
- Analyze security boundaries