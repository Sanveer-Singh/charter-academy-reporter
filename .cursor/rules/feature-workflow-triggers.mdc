# Feature Workflow Trigger Patterns

## Feature Request Detection Patterns

### Direct Feature Requests
Triggers when user message contains:
- "implement [feature]"
- "add [functionality]"
- "create [component]"
- "build [feature]"
- "develop [capability]"
- "new feature: [description]"
- "enhancement: [description]"
- "user story: [description]"

### User Story Patterns
Triggers when message follows story format:
- "As a [role], I want [feature], so that [benefit]"
- "Given [context], when [action], then [outcome]"
- Multiple related requirements listed
- Feature specification document provided

### Enhancement Requests
Triggers for improvements to existing features:
- "improve [existing feature]"
- "enhance [component]"
- "extend [functionality]"
- "upgrade [feature]"
- "optimize [capability]"

## Phase Transition Rules

### To RULE_WF_PHASE_FEATURE_ANALYSIS
**Trigger**: Feature request or user story detected
**Required Actions**:
1. Create analysis file in feature-analysis/
2. Update workflow-state.mdc
3. Load @project-context.mdc
4. Load @feature-analysis-rules.mdc
5. Search for existing similar features

### To RULE_WF_PHASE_FEATURE_PLANNING
**Trigger**: Analysis approved by user
**Required Actions**:
1. Create plan file in feature-plans/
2. Update workflow state
3. Load @feature-planning-rules.mdc
4. Load @testing-qa.mdc#Test Planning
5. Load @solid-architecture.mdc

### To RULE_WF_PHASE_FEATURE_IMPLEMENTATION
**Trigger**: Plan approved by user
**Required Actions**:
1. Update workflow state
2. Load @feature-implementation-rules.mdc
3. Load conditional rules based on feature type
4. Create task tracking in workflow state

### To RULE_WF_PHASE_FEATURE_QA
**Trigger**: All implementation tasks complete
**Required Actions**:
1. Update workflow state
2. Load @feature-qa-rules.mdc
3. Load @qa-rules.mdc
4. Prepare test execution plan

### To RULE_WF_PHASE_FEATURE_DELIVERY
**Trigger**: QA passed with no critical issues
**Required Actions**:
1. Update workflow state
2. Load @documentation.mdc
3. Prepare deployment checklist
4. Update user documentation

## Context Loading Strategy

### Feature Type Detection
Analyze feature to determine required rules:

```yaml
UI Features:
  Indicators: dashboard, form, component, display, view
  Load: @ux-guidelines.mdc, @css-architecture.mdc

API Features:
  Indicators: endpoint, service, API, integration
  Load: @security-rules.mdc#API Security, @documentation.mdc#API Docs

Data Features:
  Indicators: report, query, aggregation, analytics
  Load: @data-db.mdc, @performance.mdc

Auth Features:
  Indicators: login, permission, role, access
  Load: @security-rules.mdc, @testing-qa.mdc#Security Testing

Performance Features:
  Indicators: optimize, speed, cache, async
  Load: @performance.mdc, @testing-qa.mdc#Performance Testing
```

### Minimal Rule Loading per Phase

```yaml
Analysis Phase:
  Core:
    - @project-context.mdc
    - @feature-analysis-rules.mdc
  Conditional:
    - @solid-architecture.mdc (for pattern discovery)

Planning Phase:
  Core:
    - @feature-planning-rules.mdc
    - @testing-qa.mdc#Test Planning
    - @solid-architecture.mdc
  Conditional:
    - @security-rules.mdc (if security-related)
    - @performance.mdc (if performance-critical)

Implementation Phase:
  Core:
    - @feature-implementation-rules.mdc
    - @implementation-rules.mdc
  Conditional:
    - Feature-type specific rules

QA Phase:
  Core:
    - @feature-qa-rules.mdc
    - @qa-rules.mdc
  Conditional:
    - @testing-qa.mdc (full document)

Delivery Phase:
  Core:
    - @documentation.mdc
    - @review-rules.mdc
```

## Workflow State Management

### State File Structure for Features
```markdown
# Workflow State
**Current Phase**: RULE_WF_PHASE_FEATURE_[PHASE]
**Feature**: [Feature Name]
**Started**: YYYY-MM-DD HH:MM
**Last Updated**: YYYY-MM-DD HH:MM

## Documents
- Analysis: FeatureAnalysis_YYYYMMDD_HHMM_FeatureName.md
- Plan: FeaturePlan_YYYYMMDD_HHMM_FeatureName.md
- QA Report: FeatureQA_YYYYMMDD_HHMM_FeatureName.md

## Task Progress
- [ ] Task 1: Create filter model
- [x] Task 2: Implement repository
- [ ] Task 3: Create service layer

## Questions for User
- None

## Notes
- [Any important context]
```

### Feature vs Bug Workflow Decision Tree
```
User Request
    |
    ‚îú‚îÄ Contains "bug", "fix", "broken", "error"?
    ‚îÇ   ‚îî‚îÄ Yes ‚Üí Bug Fix Workflow
    ‚îÇ
    ‚îú‚îÄ Contains "add", "create", "implement", "new"?
    ‚îÇ   ‚îî‚îÄ Yes ‚Üí Feature Workflow
    ‚îÇ
    ‚îú‚îÄ Contains "As a", "User story", "Feature:"?
    ‚îÇ   ‚îî‚îÄ Yes ‚Üí Feature Workflow
    ‚îÇ
    ‚îî‚îÄ Ambiguous?
        ‚îî‚îÄ Analyze intent ‚Üí Choose appropriate workflow
```

## Multi-Feature Handling

### When Multiple Features Requested
1. Create separate analysis for each feature
2. Prioritize based on:
   - Dependencies
   - User preference
   - Complexity
   - Risk
3. Execute features sequentially
4. Track in workflow state

### Feature Set Template
```markdown
## Feature Set: [Set Name]
Total Features: N
Current Feature: X of N

### Features List
1. ‚úÖ Feature A - Completed
2. üîÑ Feature B - In Progress
3. ‚è≥ Feature C - Pending
4. ‚è≥ Feature D - Pending

### Dependencies
- Feature C depends on Feature B
- Feature D is independent
```

## Error Recovery for Features

### Interrupted Workflow
```markdown
Recovery Steps:
1. Check workflow-state.mdc
2. Identify last completed task
3. Review partial implementations
4. Load appropriate phase rules
5. Continue from last checkpoint
```

### Failed Implementation
```markdown
Rollback Steps:
1. Set state to RULE_WF_PHASE_FEATURE_FAILED
2. Document failure reason
3. Identify completed components
4. Plan cleanup/rollback
5. Communicate with user
```

## Trigger Examples

### Example 1: Dashboard Feature
**User**: "Add a role-based filtering system to the dashboard where admins can save and share filters"

**Detection**: Keywords "Add", "role-based", "dashboard"
**Workflow**: Feature Development
**Phase**: Start with Analysis
**Rules to Load**: 
- @project-context.mdc
- @feature-analysis-rules.mdc
- Later: @ux-guidelines.mdc

### Example 2: API Enhancement
**User**: "As an admin, I want to export dashboard data via API so that I can integrate with external tools"

**Detection**: User story format, "API", "integrate"
**Workflow**: Feature Development
**Phase**: Start with Analysis
**Rules to Load**:
- @project-context.mdc
- @feature-analysis-rules.mdc
- Later: @security-rules.mdc#API Security

### Example 3: Multiple Features
**User**: "Implement the following features:
1. User activity logging
2. Advanced search filters
3. Bulk data import"

**Detection**: "Implement", multiple items listed
**Workflow**: Feature Development (multiple)
**Phase**: Separate analysis for each
**Approach**: Prioritize and sequence

## Workflow Switching

### From Bug Fix to Feature
If bug fix reveals need for new feature:
1. Complete bug fix workflow
2. Document feature need
3. Get user approval
4. Start new feature workflow

### From Feature to Bug Fix
If feature implementation reveals bugs:
1. Pause feature workflow
2. Document found bugs
3. Decide: fix now or later
4. Switch workflow if fixing now