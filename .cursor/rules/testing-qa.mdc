---
description: Testing and quality assurance standards for comprehensive coverage
alwaysApply: false
---

# Testing & Quality Assurance Standards

## Unit Testing Guidelines

### Test Structure
```csharp
[TestClass]
public class OrderServiceTests
{
    private Mock<IOrderRepository> _mockRepository;
    private Mock<IInventoryService> _mockInventoryService;
    private OrderService _service;
    
    [TestInitialize]
    public void Setup()
    {
        _mockRepository = new Mock<IOrderRepository>();
        _mockInventoryService = new Mock<IInventoryService>();
        _service = new OrderService(_mockRepository.Object, _mockInventoryService.Object);
    }
    
    [TestMethod]
    public async Task CreateOrder_ValidInput_ReturnsSuccess()
    {
        // Arrange
        var order = new OrderDto { UserId = "user1", Items = GetValidItems() };
        _mockInventoryService.Setup(x => x.CheckAvailabilityAsync(It.IsAny<List<OrderItem>>()))
            .ReturnsAsync(true);
        
        // Act
        var result = await _service.CreateOrderAsync(order);
        
        // Assert
        Assert.IsTrue(result.Success);
        Assert.IsNotNull(result.OrderId);
        _mockRepository.Verify(x => x.AddAsync(It.IsAny<Order>()), Times.Once);
    }
}
```

### Test Coverage Requirements
- Minimum 80% code coverage for new code
- 100% coverage for critical business logic
- Edge cases must be tested
- Error paths must be covered

### Test Naming Convention
```csharp
// MethodName_StateUnderTest_ExpectedBehavior
CreateOrder_NullInput_ThrowsArgumentNullException
GetOrderById_InvalidId_ReturnsNull
ProcessPayment_InsufficientFunds_ReturnsFalseWithMessage
```

## Integration Testing

### API Testing
```csharp
[TestClass]
public class OrderApiIntegrationTests : IntegrationTestBase
{
    [TestMethod]
    public async Task POST_Orders_ValidRequest_Returns201()
    {
        // Arrange
        var client = GetAuthenticatedClient("student");
        var order = new { Items = new[] { new { ItemId = 1, Quantity = 2 } } };
        
        // Act
        var response = await client.PostAsJsonAsync("/api/orders", order);
        
        // Assert
        Assert.AreEqual(HttpStatusCode.Created, response.StatusCode);
        var result = await response.Content.ReadAsAsync<OrderResponse>();
        Assert.IsNotNull(result.OrderId);
    }
}
```

### Database Integration
```csharp
[TestMethod]
public async Task OrderRepository_CreateOrder_PersistsToDatabase()
{
    // Use real database context
    using var context = GetTestContext();
    var repository = new OrderRepository(context);
    
    // Create and save order
    var order = new Order { UserId = "test", CreatedDate = DateTime.UtcNow };
    await repository.AddAsync(order);
    
    // Verify persisted
    var saved = await context.Orders.FindAsync(order.Id);
    Assert.IsNotNull(saved);
    Assert.AreEqual("test", saved.UserId);
}
```

## Test Data Management

### Test Builders
```csharp
public class OrderBuilder
{
    private Order _order = new Order();
    
    public OrderBuilder WithUser(string userId)
    {
        _order.UserId = userId;
        return this;
    }
    
    public OrderBuilder WithItems(params OrderItem[] items)
    {
        _order.Items = items.ToList();
        return this;
    }
    
    public OrderBuilder WithStatus(OrderStatus status)
    {
        _order.Status = status;
        return this;
    }
    
    public Order Build() => _order;
}

// Usage
var order = new OrderBuilder()
    .WithUser("student1")
    .WithItems(new OrderItem { ItemId = 1, Quantity = 5 })
    .WithStatus(OrderStatus.Pending)
    .Build();
```

### Test Fixtures
```csharp
public static class TestFixtures
{
    public static List<InventoryItem> GetTestInventory() => new()
    {
        new InventoryItem { Id = 1, Name = "Apple", Quantity = 100 },
        new InventoryItem { Id = 2, Name = "Bread", Quantity = 50 },
        new InventoryItem { Id = 3, Name = "Milk", Quantity = 75 }
    };
    
    public static User GetTestStudent() => new()
    {
        Id = "student1",
        Email = "student@test.edu",
        Role = "Student"
    };
}
```

## Mocking Best Practices

### Mock Setup
```csharp
// Mock specific behavior
_mockService.Setup(x => x.GetOrderAsync(It.IsAny<int>()))
    .ReturnsAsync((int id) => new Order { Id = id });

// Mock exceptions
_mockService.Setup(x => x.ProcessOrderAsync(It.Is<int>(id => id < 0)))
    .ThrowsAsync(new ArgumentException("Invalid order ID"));

// Mock sequences
_mockService.SetupSequence(x => x.GetNextOrderNumber())
    .Returns(1001)
    .Returns(1002)
    .Returns(1003);
```

### Verification
```csharp
// Verify method called
_mockRepository.Verify(x => x.AddAsync(It.IsAny<Order>()), Times.Once);

// Verify with specific parameters
_mockEmailService.Verify(x => 
    x.SendEmailAsync(
        It.Is<string>(email => email == "user@test.com"),
        It.IsAny<string>(),
        It.IsAny<string>()
    ), Times.Once);

// Verify no other calls
_mockService.VerifyNoOtherCalls();
```

## Test Categories

### Critical Path Tests
```csharp
[TestCategory("CriticalPath")]
[TestMethod]
public async Task UserRegistration_CompleteFlow_Success()
{
    // Test entire registration workflow
}

[TestCategory("CriticalPath")]
[TestMethod]
public async Task OrderProcessing_CompleteFlow_Success()
{
    // Test complete order workflow
}
```

### Performance Tests
```csharp
[TestCategory("Performance")]
[TestMethod]
[Timeout(1000)] // Must complete in 1 second
public async Task GetOrders_LargeDataset_CompletesQuickly()
{
    // Arrange
    var orders = GenerateLargeOrderSet(1000);
    
    // Act
    var stopwatch = Stopwatch.StartNew();
    var result = await _service.GetOrdersAsync(new OrderFilter());
    stopwatch.Stop();
    
    // Assert
    Assert.IsTrue(stopwatch.ElapsedMilliseconds < 500);
}
```

## End-to-End Testing

### UI Testing with Selenium
```csharp
[TestClass]
public class OrderFlowE2ETests : SeleniumTestBase
{
    [TestMethod]
    public void CreateOrder_EndToEnd_Success()
    {
        // Navigate to order page
        Driver.Navigate().GoToUrl(BaseUrl + "/orders/create");
        
        // Fill form
        Driver.FindElement(By.Id("quantity")).SendKeys("5");
        Driver.FindElement(By.Id("item-select")).SelectByText("Apple");
        
        // Submit
        Driver.FindElement(By.Id("submit-order")).Click();
        
        // Verify success
        var successMessage = Driver.FindElement(By.ClassName("alert-success"));
        Assert.IsTrue(successMessage.Text.Contains("Order created successfully"));
    }
}
```

## Test Environment Setup

### Test Database
```csharp
public class IntegrationTestBase
{
    protected ApplicationDbContext GetTestContext()
    {
        var options = new DbContextOptionsBuilder<ApplicationDbContext>()
            .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString())
            .Options;
            
        var context = new ApplicationDbContext(options);
        SeedTestData(context);
        return context;
    }
    
    private void SeedTestData(ApplicationDbContext context)
    {
        context.Users.AddRange(TestFixtures.GetTestUsers());
        context.InventoryItems.AddRange(TestFixtures.GetTestInventory());
        context.SaveChanges();
    }
}
```

### Test Configuration
```json
// appsettings.Test.json
{
  "ConnectionStrings": {
    "DefaultConnection": "DataSource=:memory:"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Warning"
    }
  },
  "TestSettings": {
    "UseInMemoryDatabase": true,
    "DisableEmailSending": true
  }
}
```

## Continuous Integration

### Test Execution Order
1. Unit Tests (fastest)
2. Integration Tests
3. End-to-End Tests (slowest)

### Test Parallelization
```csharp
[TestClass]
[DoNotParallelize] // For tests that can't run in parallel
public class DatabaseMigrationTests
{
    // Tests that modify shared state
}

[TestClass]
[Parallelizable] // Default - tests can run in parallel
public class OrderServiceTests
{
    // Isolated unit tests
}
```

## Code Coverage Analysis

### Coverage Targets
- Overall: 80% minimum
- Critical business logic: 95%
- New code: 90%
- UI Controllers: 70%

### Exclusions
```csharp
[ExcludeFromCodeCoverage]
public class MigrationConfiguration
{
    // Auto-generated code
}

[ExcludeFromCodeCoverage]
public class Program
{
    // Startup code tested via integration tests
}
```

## Test Documentation

### Test Case Documentation
```csharp
/// <summary>
/// Verifies that orders cannot be created with negative quantities
/// </summary>
/// <remarks>
/// Business Rule: Order quantities must be positive integers
/// Related Requirement: BR-ORD-001
/// </remarks>
[TestMethod]
public async Task CreateOrder_NegativeQuantity_ThrowsValidationException()
{
    // Test implementation
}
```