---
description: Feature quality assurance phase rules for comprehensive testing and validation
globs: ["**/*"]
alwaysApply: false
---

# Feature Quality Assurance Phase Rules

## Critical Rules

### RULE 1: Acceptance Criteria Verification
- **MUST**: Test EVERY acceptance criterion from user story
- **MUST**: Verify both positive and negative scenarios
- **MUST**: Document test results against each criterion
- **ALWAYS**: Use original requirements as source of truth
- **NEVER**: Skip criteria marked as "should have"

### RULE 2: Implementation Plan Validation
- **MUST**: Verify all planned tasks were completed
- **MUST**: Check that implementation matches design
- **MUST**: Ensure no unplanned features added
- **ALWAYS**: Flag and document any deviations
- **NEVER**: Accept scope creep

### RULE 3: Architecture Compliance Testing
- **MUST**: Verify SOLID principles maintained
- **MUST**: Check layer separation integrity
- **MUST**: Validate repository pattern usage
- **ALWAYS**: Ensure services contain business logic
- **NEVER**: Allow architectural violations

### RULE 4: Edge Case Testing
- **MUST**: Test boundary conditions
- **MUST**: Verify error handling paths
- **MUST**: Test concurrent access scenarios
- **ALWAYS**: Include null/empty data tests
- **NEVER**: Test only happy paths

### RULE 5: Cross-Role Testing
- **MUST**: Test feature with ALL affected roles
- **MUST**: Verify permission boundaries
- **MUST**: Check data isolation between roles
- **ALWAYS**: Test unauthorized access attempts
- **NEVER**: Assume uniform behavior across roles

### RULE 6: Integration Testing
- **MUST**: Test complete user workflows
- **MUST**: Verify data flow through all layers
- **MUST**: Test external service interactions
- **ALWAYS**: Include database transaction tests
- **NEVER**: Test components in isolation only

### RULE 7: Performance Benchmarking
- **MUST**: Measure against defined targets
- **MUST**: Test with realistic data volumes
- **MUST**: Check memory usage patterns
- **ALWAYS**: Profile database queries
- **NEVER**: Test with minimal data only

### RULE 8: Security Validation
- **MUST**: Test all input validation
- **MUST**: Verify authorization at each layer
- **MUST**: Check for injection vulnerabilities
- **MUST**: Test session management
- **ALWAYS**: Validate encryption implementation
- **NEVER**: Trust client-side security only

### RULE 9: UI/UX Verification
- **MUST**: Test on all required devices/browsers
- **MUST**: Verify WCAG 2.1 AA compliance
- **MUST**: Test keyboard navigation
- **MUST**: Validate responsive breakpoints
- **ALWAYS**: Test with screen readers
- **NEVER**: Skip mobile testing

### RULE 10: Regression Testing
- **MUST**: Test existing related features
- **MUST**: Verify no functionality broken
- **MUST**: Check performance not degraded
- **ALWAYS**: Run full test suite
- **NEVER**: Assume isolated impact

## QA Execution Checklist
✓ All acceptance criteria verified
✓ Implementation matches plan
✓ Architecture standards maintained
✓ Edge cases thoroughly tested
✓ All roles tested with proper permissions
✓ Integration workflows validated
✓ Performance targets met
✓ Security vulnerabilities checked
✓ UI/UX standards verified
✓ No regressions found
✓ Test results documented
✓ Ready for delivery

## Test Execution Template
```markdown
# Feature QA Report: [Feature Name]
Date: YYYY-MM-DD
Tester: [Agent Name]
State: RULE_WF_PHASE_FEATURE_QA
References: FeaturePlan_YYYYMMDD_HHMM_FeatureName.md

## 1. Acceptance Criteria Verification

### User Story 1: [Title]
**Criteria**: Given [context], When [action], Then [outcome]
**Test Result**: ✅ PASS
**Evidence**: [Screenshot/Log]
**Notes**: [Any observations]

### User Story 2: [Title]
**Criteria**: [Criteria text]
**Test Result**: ❌ FAIL
**Issue**: [Description]
**Severity**: Critical/Major/Minor

## 2. Functional Testing

### Happy Path Scenarios
| Scenario | Expected | Actual | Result |
|----------|----------|--------|--------|
| Create filter | Filter saves | Filter saved | ✅ |
| Apply filter | Data filtered | Data filtered | ✅ |

### Edge Cases
| Scenario | Expected | Actual | Result |
|----------|----------|--------|--------|
| Empty filter | Show all data | Shows all | ✅ |
| Invalid dates | Error message | Error shown | ✅ |
| Max date range | Performance OK | 2.1s load | ✅ |

## 3. Cross-Role Testing

### Charter-Admin
- ✅ Can access all filters
- ✅ Can save global filters
- ✅ Sees all data

### Rebosa-Admin
- ✅ Can access role filters
- ✅ Cannot save global filters
- ✅ Sees only CPD data

### PPRA-Admin
- ✅ Limited to PPRA filters
- ❌ Seeing some Rebosa data (BUG)

## 4. Integration Testing

### Workflow: Create and Apply Filter
1. ✅ Login as Charter-Admin
2. ✅ Navigate to dashboard
3. ✅ Create new filter
4. ✅ Apply filter
5. ✅ Export filtered data
6. ✅ Logout

### API Integration
- ✅ Filter endpoint responds correctly
- ✅ Proper HTTP status codes
- ✅ Error messages user-friendly

## 5. Performance Testing

| Metric | Target | Actual | Result |
|--------|--------|--------|--------|
| Page Load | < 3s | 2.1s | ✅ |
| Filter Apply | < 1s | 0.8s | ✅ |
| Export | < 5s | 3.2s | ✅ |
| Memory Usage | < 500MB | 420MB | ✅ |

### Query Performance
- Baseline: 45ms
- With filters: 78ms
- Complex filters: 145ms
- All within targets ✅

## 6. Security Testing

### Input Validation
- ✅ SQL injection attempts blocked
- ✅ XSS attempts sanitized
- ✅ Invalid data rejected

### Authorization
- ✅ Role checks enforced
- ✅ Direct API access blocked
- ❌ Filter ID enumeration possible (ISSUE)

## 7. UI/UX Testing

### Responsive Design
- ✅ Mobile (375px): Stacked layout
- ✅ Tablet (768px): 2-column grid
- ✅ Desktop (1920px): 4-column grid

### Accessibility
- ✅ Keyboard navigation works
- ✅ Screen reader compatible
- ✅ 4.5:1 contrast ratio
- ✅ Focus indicators visible

### Cross-Browser
- ✅ Chrome 120: Full functionality
- ✅ Firefox 121: Full functionality
- ✅ Safari 17: Full functionality
- ✅ Edge 120: Full functionality

## 8. Regression Testing

### Existing Features
- ✅ Basic dashboard still loads
- ✅ Existing reports work
- ✅ Export functionality intact
- ✅ User preferences saved

### Performance Impact
- Dashboard load: +0.2s (acceptable)
- Memory usage: +15MB (acceptable)
- No degradation in other areas

## 9. Issues Found

### Critical
1. PPRA-Admin seeing Rebosa data
   - Severity: Critical
   - Impact: Data isolation breach
   - Fix Required: Yes

### Major
2. Filter ID enumeration
   - Severity: Major  
   - Impact: Security concern
   - Fix Required: Yes

### Minor
3. Filter tooltip cut off on mobile
   - Severity: Minor
   - Impact: UX issue
   - Fix Required: Optional

## 10. Test Coverage

- Unit Tests: 92% coverage ✅
- Integration Tests: 85% coverage ✅
- E2E Tests: All pass ✅
- Manual Tests: Completed ✅

## Recommendation
❌ NOT READY for delivery due to critical issues
Required fixes:
1. Fix PPRA data isolation
2. Prevent filter enumeration
3. Retest after fixes
```

## Test Scenario Patterns

### CRUD Feature Testing
```markdown
1. Create:
   - Valid data → Success
   - Invalid data → Proper errors
   - Duplicate → Handled gracefully

2. Read:
   - Single item → Correct data
   - List → Pagination works
   - Filters → Applied correctly

3. Update:
   - Valid changes → Saved
   - Invalid changes → Rejected
   - Concurrent → Last write wins

4. Delete:
   - Soft delete → Status updated
   - Hard delete → Removed
   - Cascading → Dependencies handled
```

### Dashboard Feature Testing
```markdown
1. Data Display:
   - Correct aggregations
   - Proper formatting
   - Real-time updates

2. Filtering:
   - Single filter → Works
   - Multiple filters → Combined correctly
   - Clear filters → Resets

3. Export:
   - CSV format → Valid
   - Excel format → Valid
   - Large datasets → Handled
```

### Integration Feature Testing
```markdown
1. Connection:
   - Valid credentials → Success
   - Invalid credentials → Clear error
   - Timeout → Graceful handling

2. Data Sync:
   - New data → Imported
   - Updates → Merged correctly
   - Deletes → Handled

3. Error Handling:
   - Network failure → Retry works
   - Data conflicts → Resolved
   - Rate limits → Respected
```

## Performance Testing Queries
```sql
-- Check query execution time
EXPLAIN ANALYZE
SELECT * FROM dashboard_data
WHERE user_id = ? 
  AND date BETWEEN ? AND ?
  AND category_id IN (?, ?, ?)
ORDER BY date DESC
LIMIT 100;

-- Check index usage
SHOW INDEX FROM dashboard_data;

-- Monitor slow queries
SELECT * FROM information_schema.processlist 
WHERE command != 'Sleep' 
  AND time > 1;
```

## Security Testing Checklist
```markdown
### Input Validation
- [ ] SQL injection attempts
- [ ] XSS payloads
- [ ] Command injection
- [ ] Path traversal
- [ ] Buffer overflow

### Authentication
- [ ] Brute force protection
- [ ] Session fixation
- [ ] Password policies
- [ ] Account lockout

### Authorization  
- [ ] Horizontal privilege escalation
- [ ] Vertical privilege escalation
- [ ] Direct object references
- [ ] Function level access

### Data Protection
- [ ] Encryption in transit
- [ ] Encryption at rest
- [ ] Sensitive data exposure
- [ ] Information leakage
```

## Accessibility Testing Tools
```javascript
// Automated testing
describe('Dashboard Accessibility', () => {
    it('should have no accessibility violations', async () => {
        const results = await axe.run();
        expect(results.violations).toHaveLength(0);
    });
    
    it('should be keyboard navigable', async () => {
        const firstElement = document.querySelector('[tabindex="0"]');
        firstElement.focus();
        expect(document.activeElement).toBe(firstElement);
    });
});

// Manual testing checklist
- [ ] Tab through all controls
- [ ] Use screen reader
- [ ] Test with keyboard only
- [ ] Check color contrast
- [ ] Verify focus indicators
```